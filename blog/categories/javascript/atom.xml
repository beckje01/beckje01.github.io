<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: JavaScript | Jeff Beck]]></title>
  <link href="http://beckje01.com/blog/categories/javascript/atom.xml" rel="self"/>
  <link href="http://beckje01.com/"/>
  <updated>2014-09-17T09:21:42-05:00</updated>
  <id>http://beckje01.com/</id>
  <author>
    <name><![CDATA[Jeff Beck]]></name>
    <email><![CDATA[beckje01@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[jQuery serialize() and Form Example Plugin
]]></title>
    <link href="http://beckje01.com/blog/2011/10/27/jquery-serialize-and-form-example-plugin/"/>
    <updated>2011-10-27T09:32:23-05:00</updated>
    <id>http://beckje01.com/blog/2011/10/27/jquery-serialize-and-form-example-plugin</id>
    <content type="html"><![CDATA[<p>When working with jQuery 1.6.1 and the <a href="http://mudge.github.com/jquery_example/">jQuery Form Example Plugin</a> I found that the examples were being serialized the plan was to use Ajax to send the serialized data back to the server and save it but I didn’t want to have to try and remove the examples server side. So triggering unload on the examples will allow serialize to get the correct data. Example JavaScript below.
``` js</p>

<pre><code>var examples = $('.example');
_.each(examples,function(elm){
    $(elm).unload();
});
</code></pre>

<p>```</p>

<p>I used <a href="http://documentcloud.github.com/underscore/">Userscore.js</a> to give me a quick foreach style loop and called the unload event on every element that has the class .example which is the default class that jQuery Form Example plugin uses.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java and JavaScript Datetime Fun]]></title>
    <link href="http://beckje01.com/blog/2011/05/08/java-and-javascript-datetime-fun/"/>
    <updated>2011-05-08T07:52:26-05:00</updated>
    <id>http://beckje01.com/blog/2011/05/08/java-and-javascript-datetime-fun</id>
    <content type="html"><![CDATA[<p>So dealing with Datetime between client and server side can always be fun due to timezones but adding a number of browsers makes it all the more complicated. For our project we are using <a href="http://joda-time.sourceforge.net/">Joda-Time</a> on the Java side and a mix of technologies on the client side (I will be addressing that soon). So we deiced to pass all datetimes via ISO-8601 the problem came when dealing with the different browsers. IE7 and IE8 both output a string that doesn’t have the milliseconds where Chrome and FireFox did.</p>

<p>On the Java side we used <a href="http://joda-time.sourceforge.net/apidocs/org/joda/time/format/ISODateTimeFormat.html#dateTime()">ISODateTimeFormat.dateTime()</a> to parse the incoming date string so we wanted the milliseconds.</p>

<p>To make this work I made a quick JavaScript utility that I can use to output the correct format in UTC time as we wanted. You can see the code below.</p>

<!-- more -->


<p>Its rather simple just using the UTC versions of getting the date and time elements I construct a string that will be ISO-8601 formatted. I have tested this in IE 7, 8, and 9 Chrome and FireFox. If there are any issues feel free to comment and I will do what I can to help.</p>

<p><div><script src='https://gist.github.com/961617.js'></script>
<noscript><pre><code>/* 
 * dateUtils.js
 * 
 * A simple set of utilites for dealing with dates
 * 
 */


function toISOFormat(date)
{
    var out = &quot;&quot;;
    out += date.getUTCFullYear() + &quot;-&quot; + padDigit(date.getUTCMonth()+1) + &quot;-&quot; + padDigit(date.getUTCDate()) +&quot;T&quot;+padDigit(date.getUTCHours())+&quot;:&quot;+padDigit(date.getUTCMinutes())+&quot;:&quot;+padDigit(date.getUTCSeconds())+&quot;.&quot;+padMili(date.getUTCMilliseconds())+&quot;Z&quot;;
    
    
    return out;
}


function padDigit(number) 
{
    return (number &lt; 10 ? &#39;0&#39; : &#39;&#39;) + number
}

function padMili(number)
{
    if(number&lt;10)
    {
        return &quot;00&quot;+number;
    }
    else if(number &gt;=10 &amp;&amp; number&lt;100)
    {
        return &quot;0&quot;+number;
    }
    else
    {
        return number;
    }
}</code></pre></noscript></div>
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Check for Address Bar in iOS]]></title>
    <link href="http://beckje01.com/blog/2011/02/08/check-for-address-bar-in-ios/"/>
    <updated>2011-02-08T14:07:11-06:00</updated>
    <id>http://beckje01.com/blog/2011/02/08/check-for-address-bar-in-ios</id>
    <content type="html"><![CDATA[<p>As we know how to hide the address bar in iOS, we may want to tell if a user has that bar showing or not. I use this detection to show instructions to the user to add a site to their home screen if they are not in stand alone mode.</p>

<p>There are two properties we want to look at <em>“standalone” in window.navigator</em> and <em>window.navigator.standalone</em>. We can use the first expression to check if the device supports full screen mode and the second to check if it is in full screen mode. I have checked these with the iPhone and iPad, with iOS versions 3 and 4 if anyone has any issues please post a comment and we can try and work through it.</p>

<p>The following checks will after the page is loaded output to the console the mode its in. From there you can easily replace the console.log with what ever functions you would like.</p>

<p><div><script src='https://gist.github.com/926010.js'></script>
<noscript><pre><code>if(window.navigator.standalone)
{//This page is currently standalone
   console.log(&quot;stand alone&quot;);
}
 
if(!(&quot;standalone&quot; in window.navigator))
{//This Page is shown in a browser that can&#39;t
    console.log(&quot;can&#39;t do standalone&quot;);
}</code></pre></noscript></div>
</p>

<p>There is a great write up by Ben Nadel you can find over at his blog. <a href="http://www.bennadel.com/blog/1950-Detecting-iPhone-s-App-Mode-Full-Screen-Mode-For-Web-Applications.htm">Post</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HTML5 Video and the seeked event]]></title>
    <link href="http://beckje01.com/blog/2010/05/03/html5-video-and-the-seeked-event/"/>
    <updated>2010-05-03T22:18:00-05:00</updated>
    <id>http://beckje01.com/blog/2010/05/03/html5-video-and-the-seeked-event</id>
    <content type="html"><![CDATA[<p>I have been working with the HTML5 video element a bit on both iPad and the Chrome browser. I’ve started to find some odd behavior around the seeked event. First a touch of background about the seeked event. According to the <a href="http://www.whatwg.org/specs/web-apps/current-work/multipage/video.html#mediaevents">spec</a> the seeked event should fire when the seeking IDL attribute changes to false. This seems to make perfect sense but when actually using the event it seems inconsistent at best.</p>

<p>I have seen three distinct actions that don’t make sense to me.</p>

<h2>Extra Fires</h2>

<ul>
<li>While dragging the scrub bar the seeked event will fire many times in the Google Chrome 5.0.342.9 beta on windows.</li>
<li>When setting the position by changing the currentTime attribute it will fire the seeked event three times in a row on both the iPad and Chrome.</li>
</ul>


<h2>No Fires</h2>

<ul>
<li>Scrubbing on the iPad never fires the seeked event.</li>
</ul>


<p>So from what I can tell its not the best idea to use the seeked event at this point but the timeupdate event does fire consistently through my testing. So what you can do if you like is keep track of a last value for the timeupdate and then you can detect if it jumps too far (up to you and your use) then fire the logic you wanted to fire on seeked. I am kicking off events at times and I didn’t want to miss events so simply changing my logic to fire as long as the time is past the event point worked fine for my uses but that may not always work. Keeping track of the last time from the timeupdate shouldn’t be a very hard addition if you need special seek logic.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JavaScript Passing by Value into an Inline Function
]]></title>
    <link href="http://beckje01.com/blog/2009/12/31/javascript-passing-by-value-into-an-inline-function/"/>
    <updated>2009-12-31T05:49:05-06:00</updated>
    <id>http://beckje01.com/blog/2009/12/31/javascript-passing-by-value-into-an-inline-function</id>
    <content type="html"><![CDATA[<p>I have a web page that needs to go through a bootstrap step in order to make all the correct Ajax calls. So I was simply looping through the results and making the Ajax call like the following. You will note that I needed to pass a name to the processing of the data returned but my first attempt was not working.</p>

<p>``` js</p>

<pre><code>for(i=;i&lt;myJSONObject.campus.length;i++)
{
  campus_name = myJSONObject.campus[i].name;
  var campURL=myJSONObject.campus[i].url;
  $.ajax({
        type:"post",
        url: campURL+"/fetchcampusdata.jsp?campusid="+id,
    datatype:"JSON",
    cache: false,
    success: function(data2)
    {
        processCampusData(data2, campus_name);
    },
    error: function(request,error)
        {
        alert("error in processing campus data: "+error) ;
    }
  });

}
</code></pre>

<p>```</p>

<p>That code was not working correctly as all the names were coming up as the last one in the loop. And thinking more about it that makes perfect sense. The problem is when the success function fires it looks back to the Activation Record which contains campus_name which has been modified by the loop. So what I need to do to fix it was simply move the Ajax call to a function so an AR would be created for each call allowing me to use the campus_name variable correctly.</p>

<p>``` js</p>

<pre><code>for(i=;i&lt;myJSONObject.campus.length;i++)
{
  campus_name = myJSONObject.campus[i].name;
  var campURL=myJSONObject.campus[i].url;
  callFetch(campURL[],myJSONObject.campus[i].id,campus_name);
}

function callFetch(url,id,campus_name)
{
  $.ajax({
        type:"post",
        url: url+"/fetchcampusdata.jsp?campusid="+id,
    datatype:"JSON",
    cache: false,
    success: function(data2)
    {
        processCampusData(data2, campus_name);
    },
    error: function(request,error)
        {
        alert("error in processing campus data: "+error) ;
    }
  });
}
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
</feed>
