<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Grails | Jeff Beck]]></title>
  <link href="http://beckje01.com/blog/categories/grails/atom.xml" rel="self"/>
  <link href="http://beckje01.com/"/>
  <updated>2015-01-14T20:48:44-06:00</updated>
  <id>http://beckje01.com/</id>
  <author>
    <name><![CDATA[Jeff Beck]]></name>
    <email><![CDATA[beckje01@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Memcached Tomcat Sessions and Grails App Info Plugin]]></title>
    <link href="http://beckje01.com/blog/2015/01/14/memcached-tomcat-sessions-and-grails-app-info-plugin/"/>
    <updated>2015-01-14T20:46:00-06:00</updated>
    <id>http://beckje01.com/blog/2015/01/14/memcached-tomcat-sessions-and-grails-app-info-plugin</id>
    <content type="html"><![CDATA[<p>The <a href="http://grails.org/plugin/app-info">App Info Plugin</a> for Grails is a great tool. We use it in most of our Grails deployments. One of the great features offered is the ability to view all current sessions and their details. Another tool we are using is <a href="https://code.google.com/p/memcached-session-manager/">Memcached Session Manager</a> this allows shared sessions between our Tomcat servers, great for rolling deploys and high availability.</p>

<p>We found an issue while running both of these in production. Overtime the number of sessions reported by App Info would grow extremely large. It turns out that having the App Info plugin track sessions for you when the sessions are shared via memcached can lead to the plugin holding onto references to sessions that have been destroyed on other severs.</p>

<p>So at this time we can&rsquo;t use the App Info plugin session tracking with the Memcached Session Manager, since it leads to a memory leak as all those sessions have references inside the plugin and can never be garbage collected.</p>

<p>We can simply turn off the session tracking with the following code:</p>

<p><code>groovy
grails.plugins.appinfo.useContextListener = false
</code></p>

<p>But note this config change effect how a war is made so you can&rsquo;t simply override this in production you will need a new war built.</p>

<p>Below is our memory graph before and after the change:</p>

<p><img src="/images/memchange.png" alt="Graph showing memory usage before and after the config change." /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Grails New Relic Detailed Tracing]]></title>
    <link href="http://beckje01.com/blog/2014/07/03/grails-new-relic-detailed-tracing/"/>
    <updated>2014-07-03T09:36:21-05:00</updated>
    <id>http://beckje01.com/blog/2014/07/03/grails-new-relic-detailed-tracing</id>
    <content type="html"><![CDATA[<p>New Relic with Grails by default will trace most web transactions through the controller but will not trace down into services. While most true work of a request belongs in services or libraries the default tracing leaves something to be desired.</p>

<p>This is easily fixed by adding New Relic annotations to services and libraries.</p>

<h3>BuildConfig.groovy Changes</h3>

<p>``` groovy
dependencies {</p>

<pre><code>compile 'com.newrelic.agent.java:newrelic-api:3.4.2'
</code></pre>

<p>}
```</p>

<h3>Service Changes</h3>

<p>``` groovy
import com.newrelic.api.agent.Trace</p>

<p>class SubscriptionService {</p>

<pre><code>@Trace
def save(Subscription subscription) {
//Work Here
</code></pre>

<p>  }
```</p>

<p>At this point your code is ready to give more detailed transactions, but the agent on the server must also be configured to accept custom tracing. The config option for this is not available from the web so you must update the <code>newrelic.yml</code> file. Set <code>enable_custom_tracing</code> to <code>true</code>.</p>

<p><code>yaml
  #enable_custom_tracing is used to allow @Trace on methods
  enable_custom_tracing: true
</code></p>

<p>Now you will get any custom tracing added to your application as well as custom tracing from libraries.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Grails 2.3.1 Warnings after clean.]]></title>
    <link href="http://beckje01.com/blog/2013/10/23/grails-2-3-1-warnings-after-clean/"/>
    <updated>2013-10-23T04:02:02-05:00</updated>
    <id>http://beckje01.com/blog/2013/10/23/grails-2-3-1-warnings-after-clean</id>
    <content type="html"><![CDATA[<p>If you are running grails 2.3.1 and see the following sequence pop up before you get some odd test failures.</p>

<p>``` sh</p>

<pre><code>$ grails clean
| Application cleaned.

$ grails test-app
| Environment set to test.....
| Warning No config found for the application.
| Warning DataSource.groovy not found, assuming dataSource bean is configured by Spring
</code></pre>

<p>```
Start using package in between and the problem will go away.</p>

<p>``` sh</p>

<pre><code>$ grails clean
| Application cleaned.
$ grails package
| Compiling 10 source files
| Compiling 12 source files.....

$ grails test-app
| Environment set to test.....
| Server running. Browse to http://localhost:8080/api
| Running 6 cucumber tests...
| Completed 6 cucumber tests, 0 failed in 0m 3s
| Server stopped
| Tests PASSED
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Grails 2.3 RC1 and JMS Plugin]]></title>
    <link href="http://beckje01.com/blog/2013/08/19/grails-2-3-rc1-and-jms-plugin/"/>
    <updated>2013-08-19T18:10:12-05:00</updated>
    <id>http://beckje01.com/blog/2013/08/19/grails-2-3-rc1-and-jms-plugin</id>
    <content type="html"><![CDATA[<p>Using the JMS 1.2 plugin with Grails 2.3.0.RC1 was producing a number of odd results. Mostly with missing JMS files it turns out that the new spring version didnâ€™t have the needed spring jms included. Just add the following to BuildConfig.groovy</p>

<p>``` groovy</p>

<pre><code>dependencies {
  compile 'org.springframework:spring-jms:3.2.4.RELEASE'
  ...
}
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Grails Custom UserDetailsService using a Grails Service
]]></title>
    <link href="http://beckje01.com/blog/2013/02/04/grails-custom-userdetailsservice-using-a-grails-service/"/>
    <updated>2013-02-04T08:27:27-06:00</updated>
    <id>http://beckje01.com/blog/2013/02/04/grails-custom-userdetailsservice-using-a-grails-service</id>
    <content type="html"><![CDATA[<p>Using the Grails Spring Security Core Plugin I found the need to customize the UserDetailsService and use a Grails service. (Part of the roles logic depended on an external API that we already had a service for.) This was easy to accomplish by subclassing the UserDetailsService class I wanted as a base in my case it was actually the SpringSamlUserDetailsService class because I was using the SAML plugin but normally you would subclass GormUserDetailsService. A great starting example is given in the documentation <a href="http://grails-plugins.github.com/grails-spring-security-core/docs/manual/guide/11%20Custom%20UserDetailsService.html">here</a>.</p>

<p>The difference in my case was the need to use the Grails service, I went with providing the service in the resources.groovy file. Below is the example file of what I used.</p>

<p><strong>My <em>resources.groovy</em></strong></p>

<p>``` groovy</p>

<pre><code>import com.example.saml.CustomUserDetailsService
import org.codehaus.groovy.grails.plugins.springsecurity.SpringSecurityUtils

beans = {
    userDetailsService(CustomUserDetailsService) {
         grailsApplication = ref('grailsApplication')
         myService = ref('myService')  //Here we give the reference to the service we want available.
         authorityClassName = SpringSecurityUtils.securityConfig.authority.className
         authorityJoinClassName = SpringSecurityUtils.securityConfig.userLookup.authorityJoinClassName
         authorityNameField = SpringSecurityUtils.securityConfig.authority.nameField
         samlAutoCreateActive = SpringSecurityUtils.securityConfig.saml.autoCreate.active
         samlAutoAssignAuthorities = SpringSecurityUtils.securityConfig.saml.autoCreate.assignAuthorities as Boolean
         samlAutoCreateKey = SpringSecurityUtils.securityConfig.saml.autoCreate.key as String
         samlUserAttributeMappings = SpringSecurityUtils.securityConfig.saml.userAttributeMappings
         samlUserGroupAttribute = SpringSecurityUtils.securityConfig.saml.userGroupAttribute as String
         samlUserGroupToRoleMapping = SpringSecurityUtils.securityConfig.saml.userGroupToRoleMapping
         userDomainClassName = SpringSecurityUtils.securityConfig.userLookup.userDomainClassName
         authoritiesPropertyName = SpringSecurityUtils.securityConfig.userLookup.authoritiesPropertyName
     }
}
</code></pre>

<p>```</p>

<p><strong>Snip from <em>CustomUserDetailsService.groovy</em></strong></p>

<p>``` groovy</p>

<pre><code>class CustomUserDetailsService extends SpringSamlUserDetailsService {
    def myService
...
}
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
</feed>
